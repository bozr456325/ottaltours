from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv
import os
import requests
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tours.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

db = SQLAlchemy(app)


# –ú–æ–¥–µ–ª—å "–¢—É—Ä"
class Tour(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=False)
    price = db.Column(db.Integer, nullable=False)
    duration = db.Column(db.String(50), nullable=False)
    image = db.Column(db.String(100), nullable=False)


# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
@app.cli.command("init-db")
def init_db():
    db.create_all()
    if not Tour.query.first():
        tours_data = [
            Tour(title='–û—Ç–¥—ã—Ö –≤ –¢—É—Ä—Ü–∏–∏',
                 description='–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –æ—Ç–¥—ã—Ö –Ω–∞ –±–µ—Ä–µ–≥—É –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–≥–æ –º–æ—Ä—è',
                 price=45000, duration='7 –¥–Ω–µ–π', image='turkey.jpg'),
            Tour(title='–≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ –ò—Ç–∞–ª–∏–∏',
                 description='–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ —Å–∞–º—ã–º –∫—Ä–∞—Å–∏–≤—ã–º –≥–æ—Ä–æ–¥–∞–º –ò—Ç–∞–ª–∏–∏',
                 price=78000, duration='10 –¥–Ω–µ–π', image='italy.jpg'),
            Tour(title='–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π –∫—É—Ä–æ—Ä—Ç –≤ –ê–ª—å–ø–∞—Ö',
                 description='–ö–∞—Ç–∞–Ω–∏–µ –Ω–∞ –ª—ã–∂–∞—Ö –≤ –ª—É—á—à–∏—Ö –∫—É—Ä–æ—Ä—Ç–∞—Ö –®–≤–µ–π—Ü–∞—Ä–∏–∏',
                 price=92000, duration='8 –¥–Ω–µ–π', image='alps.jpg')
        ]
        db.session.add_all(tours_data)
        db.session.commit()
    print("–ë–î —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

def send_telegram_notification(name, phone, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–º–µ—Ä–∞"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram")
        return False

    # 1. –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    clean_phone = ''.join(c for c in phone if c.isdigit())

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –ª–∏ –Ω–æ–º–µ—Ä (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 7, 8 –∏–ª–∏ +7)
    is_russian = (
        clean_phone.startswith('7') or
        clean_phone.startswith('8') or
        phone.lstrip('+').startswith('7')
    )

    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞
    if is_russian:
        if clean_phone.startswith('8') and len(clean_phone) == 11:
            clean_phone = '7' + clean_phone[1:]  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º 89... –≤ 79...
        elif len(clean_phone) == 10:
            clean_phone = '7' + clean_phone  # –î–æ–±–∞–≤–ª—è–µ–º 7, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        elif clean_phone.startswith('7') and len(clean_phone) > 11:
            clean_phone = clean_phone.lstrip('7')  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ 7

    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    if is_russian and len(clean_phone) == 11 and clean_phone.startswith('7'):
        formatted_phone = f"+7 ({clean_phone[1:4]}) {clean_phone[4:7]}-{clean_phone[7:9]}-{clean_phone[9:]}"
    else:
        formatted_phone = phone  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤

    # 5. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    keyboard = None
    if is_russian and len(clean_phone) == 11:
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Telegram",
                        "url": f"https://t.me/+7{clean_phone[1:]}"  # +79XXXXXXXXX
                    },
                    {
                        "text": "üí¨ WhatsApp",
                        "url": f"https://wa.me/7{clean_phone[1:]}"  # 79XXXXXXXXX
                    }
                ]
            ]
        }

    # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"""
<b>üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>
‚îå <b>–ò–º—è:</b> {name}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{formatted_phone}</code>
‚îî <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message}

<i>üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>
    """

    try:
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
            json={
                'chat_id': TELEGRAM_CHAT_ID,
                'text': text,
                'parse_mode': 'HTML',
                'reply_markup': keyboard,
                'disable_web_page_preview': True
            },
            timeout=10
        )
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

# –†–æ—É—Ç—ã
@app.route('/get-chat-id')
def get_chat_id():
    updates_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    try:
        response = requests.get(updates_url)
        return f"–í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.json()}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"


@app.route('/')
def index():
    featured_tours = Tour.query.limit(3).all()
    return render_template('index.html', featured_tours=featured_tours)


@app.route('/tours')
def tours_page():
    all_tours = Tour.query.all()
    return render_template('tours.html', tours=all_tours)


@app.route('/tour/<int:tour_id>')
def tour_detail(tour_id):
    tour = Tour.query.get_or_404(tour_id)
    return render_template('tour_detail.html', tour=tour)


@app.route('/about')
def about():
    return render_template('about.html')


@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        name = request.form.get('name')
        phone = request.form.get('phone')
        message = request.form.get('message')

        if send_telegram_notification(name, phone, message):
            return render_template('contact.html', success=True)
        else:
            return render_template('contact.html', error=True)

    return render_template('contact.html')


@app.route('/terms')
def terms():
    return render_template('legal/terms.html', title='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')


@app.route('/privacy')
def privacy():
    return render_template('legal/privacy.html', title='–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')


@app.route('/personal-data')
def personal_data():
    return render_template('legal/personal_data.html', title='–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')


if __name__ == '__main__':
    app.run(debug=True)